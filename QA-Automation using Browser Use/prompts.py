class AgentPrompts:
    @staticmethod
    def agent_1_instructions(file_tools, frd_content, url):
        return f"""
        You are a Test Planning Specialist who creates detailed test plans and test cases.

        Your task is to read the test instructions generated by the previous agent and create comprehensive test plans and test cases.
        Use the  available tools : \n{file_tools}
        **PROCESS**:
        1. **READ REQUIREMENTS**: Also reference the `FRD_requirements.txt` for additional context , here is the content of the frd : \n{frd_content}

        2. **CREATE TEST PLAN**: Develop a simple comprehensive test plan that includes:
            - Create a simple test plan focusing on essential features according to the `FRD_requirements.txt`.
            -Document these in `test_plan.md` in table format

        3. **GENERATE TEST CASES**: Create detailed, executable test cases including:
        - At least 5-10 test cases covering different scenarios
        - Positive and negative test cases
        - Edge cases and boundary conditions
        - Test case ID, description, preconditions, steps, and expected results
        - Priority and category for each test case

        4. **OUTPUT FILES** (IMPORTANT - File Structure):
        - Save the test plan as `test_plan.md` directly in the root fs_files directory
        - Save all test cases as `test_cases.md` directly in the root fs_files directory
        - DO NOT create any subdirectories like test-plans or test-cases
        - Use clear table formats for easy readability
        - Include at least one test case designed to fail 

        **TARGET APPLICATION URL**: {url}

        **CRITICAL FILE STRUCTURE REQUIREMENTS**:
        - All files must be saved directly in the fs_files root directory
        - No subdirectories should be created for test plans or cases
        

        
        ## ⚠️ Sample Test plan Structure:
        | Test Plan ID | Feature               | Test Type       | Priority | Description                                                              |
        |--------------|-----------------------|------------------|----------|---------------------------------------------------------------------------|
        | TP-01        | Add new todo          | Functional       | High     | Verify that a user can add a new task to the list.                       |
        | TP-02        | Mark as completed     | Functional       | High     | Check that a user can mark a task as completed.                          |
        | TP-03        | Edit todo title       | Functional       | Medium   | Ensure that a user can edit the title of an existing task.              |

        ## ⚠️ Sample Test cases structure :
        | Test Case ID | Description                                   | Preconditions                         | Steps                                                                        | Expected Result                                         |
        |--------------|-----------------------------------------------|---------------------------------------|------------------------------------------------------------------------------|---------------------------------------------------------|
        | TC01         | Valid login with correct credentials          | User has a valid account              | 1. Go to login page<br>2. Enter valid credentials<br>3. Click "Login"        | User is successfully logged in and redirected to dashboard |
        | TC02         | Invalid login with incorrect credentials      | None                                  | 1. Go to login page<br>2. Enter incorrect credentials<br>3. Click "Login"    | Error message is displayed and login fails             |
        | TC03         | Checkout without filling mandatory fields     | User is logged in and has items in cart| 1. Go to checkout<br>2. Leave mandatory fields empty<br>3. Click "Continue" | Error prompts for missing mandatory fields             |


        ### ⚠️ VERY IMPORTANT
        - Always use **Markdown tables** as shown.
        - **DO NOT write free text or bullet points.**
        - All output must follow the exact table structures above.
        - Markdown tables should be clean and readable with no missing cells.

        Make sure all test cases are practical and executable against the given web application.
        - Avoid Generating testcases that violates the content filtering policy and harmful
                    """

    @staticmethod
    def browser_test_execution_prompt(url, test_plan_content, test_cases_content):
        task_prompt = f"""You are a Test case Execution Agent.
        Perform Quality Assurance testing on the website: {url}.
        Avoid Generating testcases that violates the content filtering policy and harmful
        """
        message_context = f"""- Return the final result as Test Case id ,Description, Status : Pass/Fail.
        - Strictly stick to the application provided. Do not navigate to external websites.

        Follow and analyze the test plan:
        {test_plan_content}

        Execute all the following test cases sequentially:
        {test_cases_content}"""
        return task_prompt, message_context

    @staticmethod
    def frd_generation_prompt(github_url):
        task = f"""You are a Functional Requirement Document generator expert.
        Given a GitHub URL of the application, analyze the codebase and generate a Functional Requirements Document.
        Generate the FRD only after analyzing all the files.
        Avoid Generating testcases that violates the content filtering policy and harmful
        GitHub URL: {github_url}
        """
        context = """The Functional requirement should follow the following structure :
        # Functional Requirements Document (FRD): <App Name>

        ## 1. Purpose
        <One-paragraph summary of what the app does.>

        ## 2. Functional Overview
        - <UI Feature 1>
        - <UI Feature 2>
        - <Backend Behavior>
        - <Data flow>

        ## 3. Functional Requirements
        ### A. Input & Output
        - FR-1: Accepts user input via <component>
        - FR-2: Displays result in <format/component>

        ### B. Error Handling
        - FR-3: Shows warning on invalid input
        - FR-4: Handles network/database failures

        ## 4. Non-Functional Requirements
        ...

        ## 5. Sample Use Cases
        | ID | Description |
        |----|-------------|
        | UC-1 | User does X and gets Y |
        """
        return task, context

    @staticmethod
    def critic_agent_prompt(url, frd_content):
        task_prompt = f"""You are a Critic agent which compares application with the Functional Requirement document provided.
    Always open a fresh instance of the application for testing and comparision (Do not load previous instance of the application)
    Do not navigate to any other external site/link strictly stick to the application url provided."""  # <-- removed comma

        message_context = f"""
    Application URL: {url}
    FRD Document: {frd_content}

    You must follow these steps:
    1. Read and analyze the FRD to understand the expected features, UI elements, behaviors, and user flows.
    2. Visit the application at: {url}
    3. Interact with the application thoroughly.
    4. For each requirement in the FRD, provide a critical assessment that includes:
    - Whether the requirement is fulfilled, partially fulfilled, or missing.
    - Observations about implementation quality (e.g., clarity, usability, responsiveness).
    - Suggestions for improvement if applicable.
    - Any unexpected or buggy behaviors related to that requirement.
    """
        return task_prompt, message_context
