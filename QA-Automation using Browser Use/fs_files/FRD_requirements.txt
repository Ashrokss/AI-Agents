



## Functional Requirements Document (FRD)



**Application**: TodoMVC Web App

**Platform**: Web (Single Page Application)



---



### 1. Purpose



This application allows users to **manage a list of tasks** (to-dos) via a simple interface. Users can add new tasks, mark them as complete, filter the view (All/Active/Completed), and remove tasks or clear all completed ones. It's built to demonstrate typical front-end CRUD behavior and serves as a reference for testing UI interactions.



---



### 2. Functional Overview



| Feature               | Description                                                                 |

| --------------------- | --------------------------------------------------------------------------- |

| Add new todo          | Enter text and press Enter to add a new task to the list.                   |

| Mark as completed     | Click the checkbox next to a task to mark it as completed.                  |

| Edit todo title       | Double-click a task to edit its label and press Enter to save.              |

| Delete a todo         | Click the "X" (delete button) next to a task to remove it.                  |

| Toggle all tasks      | Click the top-left checkbox to mark all as complete/incomplete.             |

| Filter view           | Switch between "All", "Active", and "Completed" using the footer tabs.      |

| Clear completed tasks | Click "Clear completed" to remove all completed tasks from the list.        |

| Count active items    | Footer dynamically shows how many tasks are still pending.                  |

| URL-based routing     | App updates the route (`#/all`, `#/active`, `#/completed`) based on filter. |



---



### 3. Functional Requirements



#### A. Task Management



* **FR-1**: The user shall be able to add a new task by typing in the input field and pressing Enter.

* **FR-2**: The application shall add the task to the top of the list.

* **FR-3**: Each task shall have a checkbox that toggles its completion state.

* **FR-4**: The user shall be able to double-click a task to edit its content and press Enter to save.

* **FR-5**: The user shall be able to delete a task using the "X" icon.



#### B. Bulk Actions



* **FR-6**: The user shall be able to mark all tasks as complete/incomplete using the top-left checkbox.

* **FR-7**: The user shall be able to clear all completed tasks using the "Clear completed" button.



#### C. Filtering & Routing



* **FR-8**: The user shall be able to filter tasks using three tabs: All, Active, Completed.

* **FR-9**: The app shall update the URL route to reflect the current filter state (`#/all`, `#/active`, `#/completed`).

* **FR-10**: The user shall see the correct subset of tasks based on the filter.



#### D. UI Feedback



* **FR-11**: The footer shall show the number of active (not completed) tasks.

* **FR-12**: The "Clear completed" button shall only be visible when there is at least one completed task.



---



### 4. Non-Functional Requirements



* **NFR-1**: The app shall update UI state instantly (SPA behavior) without reloading the page.

* **NFR-2**: The app shall maintain task state in memory (not persisted after refresh).

* **NFR-3**: The app shall support keyboard interactions (e.g., Enter to add, Esc to cancel edit).



---



### ðŸ§ª 5. Sample Use Cases



| Use Case ID | Description                                                                           |

| ----------- | ------------------------------------------------------------------------------------- |

| UC-01       | User adds three tasks, marks one as completed, and sees "2 items left" in the footer. |

| UC-02       | User filters to "Active", only sees uncompleted tasks.                                |

| UC-03       | User edits a task, presses Esc â€” change is discarded.                                 |

| UC-04       | User deletes a task and it disappears from the list immediately.                      |

| UC-05       | User marks all tasks as complete and clears completed tasks â€” the list becomes empty. |





